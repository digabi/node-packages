name: 'Publish new version'

on:
  workflow_dispatch:
    inputs:
      package:
        type: choice
        description: Package
        options:
          - '@digabi/validation'
          - '@digabi/fetch'
          - '@digabi/logger'
          - '@digabi/express'
          - '@digabi/testing'
      bump:
        type: choice
        description: Version bump (if package not in npm registry, current version will be published)
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease

run-name: 'Publish ${{ inputs.package }}'

concurrency:
  group: publish-queue # Publish jobs fail if ran simultaneously

jobs:
  publish:
    name: Publish new version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}" > $PWD/.npmrc
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint --workspace=${{ inputs.package }}
      - run: npm run test --workspace=${{ inputs.package }}
      - run: npm run build --workspace=${{ inputs.package }}

      - name: Determine publish parameters
        id: publish-parameters
        run: |
          git config --global user.email "ci@ylioppilastutkinto.fi"
          git config --global user.name "Github CI"

          TAG=latest

          if [[ "${{ inputs.bump }}" == *pre* ]]; then
            branchName="${{ github.ref_name }}"
            TAG=${branchName//\//-}
          fi

          echo "Check if package exists in npm registry"
          CODE=$(npm view ${{ inputs.package }} --json | jq '.error.code')

          if [ "$CODE" = '"E404"' ]; then
            STATE=initial
          else
            STATE=update
            npm version ${{ inputs.bump }} --preid="$TAG" --workspace=${{ inputs.package }}
          fi

          VERSION=$(npm version --json --workspace=${{ inputs.package }} | jq -r '."${{ inputs.package }}"')
          GIT_TAG_NAME=${{ inputs.package }}@$VERSION

          echo "state=$STATUS" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "gitTagName=$GIT_TAG_NAME" >> $GITHUB_OUTPUT

      # Do not create release commit for initial publishes since nothing has changed.
      - name: Create release commit
        if: ${{ steps.publish-parameters.outputs.state == 'update' }}
        run: |
          TAG=${{ steps.publish-parameters.outputs.tag }}
          GIT_TAG_NAME=${{ steps.publish-parameters.outputs.gitTagName }}

          git add **/package.json package-lock.json
          git commit -m "CI: Release $GIT_TAG_NAME with tag $TAG"

      - name: Create tag
        run: |
          GIT_TAG_NAME=${{ steps.publish-parameters.outputs.gitTagName }}
          git tag -a $GIT_TAG_NAME -m $GIT_TAG_NAME

      - name: Publish to npm and push to git
        run: |
          TAG=${{ steps.publish-parameters.outputs.tag }}

          npm publish --workspace=${{ inputs.package }} --tag=$TAG
          git push && git push --tags
